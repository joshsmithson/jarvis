import { NextRequest, NextResponse } from "next/server";
import { getSupabaseServerClient } from "@/lib/supabaseServer";

const supabase = getSupabaseServerClient();

export async function POST(request: NextRequest) {
  try {
    const { 
      user_id, 
      title, 
      transcript, 
      audio_url,
      duration_seconds,
      estimated_tokens,
      cost_cents,
      usage_metadata 
    } = await request.json();

    if (!user_id || !title) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const { data, error } = await supabase
      .from('conversations')
      .insert([
        {
          user_id,
          title,
          transcript: transcript || '',
          audio_url: audio_url || null,
          duration_seconds: duration_seconds || 0,
          estimated_tokens: estimated_tokens || 0,
          cost_cents: cost_cents || 0,
          usage_metadata: usage_metadata || null,
          // created_at will be auto-generated by the database
        }
      ])
      .select()
      .single();

    if (error) {
      console.error('Supabase error:', error);
      return NextResponse.json({ error: 'Failed to save conversation' }, { status: 500 });
    }

    // After saving conversation, save detailed usage data if provided
    if (usage_metadata && data.id) {
      const usageData = {
        conversation_id: data.id,
        user_id,
        conversation_duration_seconds: duration_seconds || 0,
        user_speech_duration_seconds: usage_metadata.user_speech_duration || 0,
        ai_speech_duration_seconds: usage_metadata.ai_speech_duration || 0,
        estimated_tokens: estimated_tokens || 0,
        cost_cents: cost_cents || 0,
        provider: 'elevenlabs',
        provider_response_data: usage_metadata.raw_data || null,
      };

      const { error: usageError } = await supabase
        .from('conversation_usage')
        .insert([usageData]);

      if (usageError) {
        console.error('Failed to save usage data:', usageError);
        // Don't fail the entire request if usage tracking fails
      }
    }

    return NextResponse.json({ conversation: data });
  } catch (error) {
    console.error('Error saving conversation:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const user_id = searchParams.get('user_id');

    if (!user_id) {
      return NextResponse.json({ error: 'Missing user_id' }, { status: 400 });
    }

    const { data, error } = await supabase
      .from('conversations')
      .select('id, title, created_at, transcript, audio_url')
      .eq('user_id', user_id)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase error:', error);
      return NextResponse.json({ error: 'Failed to fetch conversations' }, { status: 500 });
    }

    return NextResponse.json({ conversations: data || [] });
  } catch (error) {
    console.error('Error fetching conversations:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}



